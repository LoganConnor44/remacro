{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Toggle","value","onChange","handleChange","useCallback","event","target","checked","style","fontSize","type","CodeArea","language","className","onValueChange","highlight","code","padding","fontFamily","emoji","EmojiConvertor","allow_native","use_css_imgs","avoid_ms_emoji","Rendered","markdown","js","useState","isMarkdown","setIsMarkdown","content","useMemo","c","transpile","err","console","log","replace_colons","safeTranspile","source","EditorPane","setMarkdown","setJs","languages","jsx","markup","Header","float","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PAgCMA,EAAS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAChBC,EAAeC,uBAAY,SAAAC,GAC/BH,EAASG,EAAMC,OAAOC,WACrB,CAACL,IAEJ,OAAO,0BAAMM,MAAO,CAACC,SAAU,UAC7B,2BACEC,KAAK,WACLH,QAASN,EACTC,SAAUC,IACZ,6DAIEQ,EAAW,SAAC,GAAmC,IAAjCV,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUU,EAAe,EAAfA,SACnC,OAAO,6BACL,kBAAC,IAAD,CACEC,UAAU,SACVZ,MAAOA,EACPa,cAAeZ,EACfa,UAAW,SAAAC,GAAI,OAAID,oBAAUC,EAAMJ,IACnCK,QAAS,GACTT,MAAO,CACLU,WAAY,sCACZT,SAAU,QAMZU,EAAQ,IAAIC,EAElBD,EAAME,cAAe,EACrBF,EAAMG,cAAe,EACrBH,EAAMI,gBAAiB,EAavB,IAAMC,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GAAS,EACDC,oBAAS,GADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAG/BC,EAAUC,mBAAQ,SAAA1B,GACtB,OAfJ,SAAuBoB,EAAUC,GAC7B,IAAIM,EACJ,IACEA,EAAIC,oBAAUR,EAAUC,GACxB,MAAOQ,GACPC,QAAQC,IAAIF,GACZF,EAAIP,EAEN,OAAON,EAAMkB,eAAeL,GAOrBM,CAAcb,EAAUC,KAC9B,CAACD,EAAUC,IAEd,OAAO,6BACL,kBAAC,EAAD,CAAQzB,MAAO2B,EAAY1B,SAAU2B,IACrC,yBAAKhB,UAAU,mCACbe,EAAa,kBAAC,EAAD,CAAeW,OAAQT,IAAc,6BAAMA,MAKxDU,EAAa,WAAO,IAAD,EACSb,mBA9Eb,qLA6EI,mBAChBF,EADgB,KACNgB,EADM,OAEHd,mBAnFP,8IAiFU,mBAEhBD,EAFgB,KAEZgB,EAFY,KAIvB,OACE,yBAAK7B,UAAU,kBACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUZ,MAAOyB,EAAIxB,SAAUwC,EAAO9B,SAAU+B,YAAUC,MAC1D,kBAAC,EAAD,CAAU3C,MAAOwB,EAAUvB,SAAUuC,EAAa7B,SAAU+B,YAAUE,UAExE,yBAAKhC,UAAU,sBACb,kBAAC,EAAD,CAAUY,SAAUA,EAAUC,GAAIA,OAMpCoB,EAAS,WACb,OAAO,yBAAKjC,UAAU,oBACpB,yBAAKL,MAAO,CAACuC,MAAO,SAClB,8BAAM,wCACN,8BAAM,yFAER,yBAAKvC,MAAO,CAACuC,MAAO,UAClB,8BAAM,uBAAGC,KAAK,yCAAwC,2CAgB7CC,MAXf,WACE,OACE,yBAAKpC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCpHYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.9c2810ed.chunk.js","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport './App.css'\nimport './prism.css'\nimport { transpile } from 'remacro-core'\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-jsx';\nimport * as ReactMarkdown from 'react-markdown';\nimport * as EmojiConvertor from 'emoji-js';\n\nconst defaultJs = `const Box = ({ icon, children }) => \"> :\" + icon + \": \" + children\n\nconst LoveBox = ({ children }) => <Box icon=\"heart\">{children}</Box>`\n\nconst defaultMarkdown = `# Hello World\n\nLorem ipsum\n\n<LoveBox>This is a custom widget</LoveBox>\n\n| hi | hello |\n| :--: | :--: |\n| foo | bar |\n\n* List Item 1\n  * List Item 1.1\n* List Item 2\n`\n\nconst Toggle = ({value, onChange}) => {\n  const handleChange = useCallback(event => {\n    onChange(event.target.checked)\n  }, [onChange])\n\n  return <span style={{fontSize: \"small\"}} >\n    <input\n      type=\"checkbox\"\n      checked={value}\n      onChange={handleChange} />\n    <span>Render output as markdown</span>\n  </span>\n}\n\nconst CodeArea = ({ value, onChange, language }) => {\n  return <div>\n    <Editor\n      className=\"editor\"\n      value={value}\n      onValueChange={onChange}\n      highlight={code => highlight(code, language)}\n      padding={10}\n      style={{\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n        fontSize: 13,\n      }}\n    />\n  </div>\n}\n\nconst emoji = new EmojiConvertor()\n// emoji.replace_mode = 'native'\nemoji.allow_native = true\nemoji.use_css_imgs = false\nemoji.avoid_ms_emoji = false\n\nfunction safeTranspile(markdown, js) {\n    let c\n    try {\n      c = transpile(markdown, js)\n    } catch (err) {\n      console.log(err)\n      c = markdown\n    }\n    return emoji.replace_colons(c)\n}\n\nconst Rendered = ({ markdown, js }) => {\n  const [isMarkdown, setIsMarkdown] = useState(true)\n\n  const content = useMemo(event => {\n    return safeTranspile(markdown, js)\n  }, [markdown, js])\n\n  return <div>\n    <Toggle value={isMarkdown} onChange={setIsMarkdown} />\n    <div className=\"rendered-markdown markdown-body\">\n    { isMarkdown ? <ReactMarkdown source={content} /> : <pre>{content}</pre> }\n  </div>\n</div>\n}\n\nconst EditorPane = () => {\n  const [markdown, setMarkdown] = useState(defaultMarkdown)\n  const [js, setJs] = useState(defaultJs)\n\n  return (\n    <div className=\"flex-container\">\n      <div className=\"flex-item code\">\n        <CodeArea value={js} onChange={setJs} language={languages.jsx} />\n        <CodeArea value={markdown} onChange={setMarkdown} language={languages.markup} />\n      </div>\n      <div className=\"flex-item rendered\">\n        <Rendered markdown={markdown} js={js} />\n      </div>\n    </div>\n  );\n}\n\nconst Header = () => {\n  return <div className=\"header-container\">\n    <div style={{float: \"left\"}}>\n      <span><h2>remacro</h2></span>\n      <span><h5>a plain-text macro expander with React-inspired widgets</h5></span>\n    </div>\n    <div style={{float: \"right\"}}>\n      <span><a href=\"https://github.com/denisidoro/remacro\"><h4>GitHub</h4></a></span>\n    </div>\n  </div>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n        <EditorPane />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}